<?php
namespace CfdiUtils\CadenaOrigen;

use DOMDocument;
use LibXMLError;
use XSLTProcessor;

/**
 * The class CadenaOrigenLocations create the CadenaOrigenLocations by transforming the XML contents
 * using the XSLT utilities provided by SAT.
 *
 * This class is a helps override or set the location of the clst resource.
 */
class CadenaOrigenBuilder
{
    /**
     * Perform the xslt transformation if the xml contents to create the "Cadena de origen"
     * for a "Comprobante fiscal digital por internet (cfdi)"
     *
     * This method will search for the registered xslt location the xlstLocation argument is empty
     *
     * All errors generated by the process will create a RuntimeException
     *
     * @param string $cfdiContent
     * @param string $xsltLocation
     * @return string
     * @throws \UnexpectedValueException if the cfdi content is empty
     * @throws \RuntimeException on procedural errors
     */
    public function build(string $cfdiContent, string $xsltLocation): string
    {
        if ('' === $cfdiContent) {
            throw new \UnexpectedValueException('The XML content to transform is empty');
        }
        if ('' === $xsltLocation) {
            throw new \UnexpectedValueException('Xslt location was not set');
        }
        $libxmlErrors = libxml_use_internal_errors(true);
        try {
            // load the cfdi document
            $cfdi = new DOMDocument();
            if (! $cfdi->loadXML($cfdiContent)) {
                throw $this->createLibXmlErrorOrMessage('Error while loading the cfdi content');
            }

            $xsl = new DOMDocument();
            if (! $xsl->load($xsltLocation)) {
                throw $this->createLibXmlErrorOrMessage('Error while loading the Xslt location');
            }

            $xslt = new XSLTProcessor();
            if (! $xslt->importStylesheet($xsl)) {
                throw $this->createLibXmlErrorOrMessage('Error while importing the style sheet from the Xslt location');
            }

            // this error silenced call is intentional, avoid transformation errors except when return false
            $transform = @$xslt->transformToXml($cfdi);
            if (false === $transform || null === $transform) {
                throw $this->createLibXmlErrorOrMessage('Error while transforming the xslt content');
            }

            return $transform;
        } finally {
            libxml_clear_errors();
            libxml_use_internal_errors($libxmlErrors);
        }
    }

    private function createLibXmlErrorOrMessage(string $message): \RuntimeException
    {
        $error = libxml_get_last_error();
        if (($error instanceof LibXMLError) && isset($error->message)) {
            $message = $message . ': ' . $error->message;
        }
        return new \RuntimeException($message);
    }
}
